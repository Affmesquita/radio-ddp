sudo systemctl start nginx     

sudo systemctl status nginx

sudo systemctl restart nginx

sudo systemctl restart nginx-rtmp

sudo systemctl start nginx-rtmp <<<
sudo systemctl stop nginx-rtmp <<<
sudo systemctl status nginx-rtmp <<<
sudo systemctl enable nginx-rtmp <<<
sudo systemctl disable nginx-rtmp <<<
sudo systemctl reload nginx-rtmp <<<
sudo systemctl restart nginx-rtmp



sudo /usr/local/nginx/sbin/nginx -t   ver se a conf certa

sudo systemctl enable nginx 
(Esse comando garante que o Nginx seja iniciado automaticamente toda vez que o sistema for reiniciado.)

sudo systemctl stop nginx

nano /etc/systemd/system/nginx.service <<
          
sudo nano /etc/nginx/nginx.conf <<
 <<
sudo nano /usr/local/nginx/conf/nginx.conf 

cat /usr/local/nginx/conf/nginx.conf <

/etc/letsencrypt/renewal/radioddp.com.conf  <<
sudo nano /etc/nginx/sites-available/default *** sudo nano /etc/nginx/sites-available/radioddp *** sudo ln -s /etc/nginx/sites-available/radioddp /etc/nginx/sites-enabled/

sudo rm /etc/nginx/sites-enabled/default

sudo chmod -R 755 /tmp/hls
(Verificação de Permissões: Certifique-se de que o Nginx tem permissão para escrever na pasta /tmp/hls. Você pode fazer isso executando um comando como)

sudo /usr/local/nginx/sbin/nginx -t PARA VER A SINTAXE ESTA CORRETA

ls /tmp/hls //  ls -l /tmp/hls

{
sudo mkdir -p /tmp/hls
sudo chown -R www-data:www-data /tmp/hls
sudo chmod 755 /tmp/hls
}

/usr/local/nginx/sbin/nginx -V

  TESTE
  sudo nginx -t

LINKS

rtmp://localhost:1935/live chave radio_ddp


rtmp://localhost:1935/live/radio_ddp 


http://localhost:8080/live/radio_ddp.m3u8 (link correto, acertando o cors da certo)








 Testar a configuração do Nginx
Certifique-se de que a configuração do Nginx está correta:

sudo /usr/local/nginx/sbin/nginx -t                                            




rtmp://147.93.69.212/live





root@srv704679:/home/root/radio-ddp/nginx-1.25.2#







O Nginx é fundamental para muitos projetos por várias razões:

Servidor Web de Alta Performance : Ele é extremamente eficiente em usar arquivos estáticos (HTML, CSS, JS) e lidar com muitas conexões simultâneas, ideal para sites e APIs.

Proxy Reverso : Atua como um intermediário entre os usuários e o aplicativo backend (como Node.js, Django, etc.), gerenciando requisições e melhorando a segurança e o desempenho.

Balanceamento de Carga : Distribui o tráfego entre vários servidores, garantindo alta disponibilidade e escalabilidade.

SSL e Segurança : Facilita a configuração de HTTPS e protege seu projeto contra ataques comuns, como DDoS.

//////////////////////////////////////////////////////////////////////////////////////////////////

Welcome to Ubuntu 24.04.1 LTS (GNU/Linux 6.8.0-49-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/pro

 System information as of Fri Jan 24 16:47:34 UTC 2025

  System load:  0.0               Processes:             108
  Usage of /:   2.4% of 95.82GB   Users logged in:       1
  Memory usage: 6%                IPv4 address for eth0: 147.93.69.212
  Swap usage:   0%                IPv6 address for eth0: 2a02:4780:14:36d4::1


Expanded Security Maintenance for Applications is not enabled.

12 updates can be applied immediately.
To see these additional updates run: apt list --upgradable

Enable ESM Apps to receive additional future security updates.
See https://ubuntu.com/esm or run: sudo pro status


Last login: Fri Jan 24 16:44:16 2025 from 169.254.0.1






sudo /usr/local/nginx/sbin/nginx -t



include       mime.types;
default_type  application/octet-stream;

   sendfile on











PROBLEMAS DE PORTA ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]



sudo lsof -i :80
sudo lsof -i :8080
sudo lsof -i :1935

sudo systemctl stop nginx

sudo kill <PID>

sudo systemctl start nginx

sudo systemctl status nginx

sudo nginx -t
Logs do Nginx: Se houver problemas, verifique os logs novamente:
bash

sudo tail -n 50 /var/log/nginx/error.log


Observações Finais
Se você ainda estiver tendo problemas após seguir esses passos, forneça as saídas dos comandos que você executou para que eu possa ajudar a diagnosticar mais a fundo. É importante garantir que apenas uma instância do Nginx esteja tentando usar as mesmas portas.












http {
        sendfile on;
        include       mime.types;
        default_type  application/octet-stream;
        server {
    listen 8080;
    server_name radios.ddp www.radios.ddp;

    # Configuração para o diretório raiz
    location / {
        root /home/usuario/GitHub/radio-ddp/public;  # Caminho para os arquivos estáticos
        index index.html index.htm;
        proxy_pass http://localhost:3000;  # Encaminha requisições para o servidor Node.js
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Configuração para o caminho /live
    location /live {
        add_header 'Access-Control-Allow-Origin' '*';  # Permite CORS
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept';

        types {
            application/vnd.apple.mpegurl m3u8;  # Tipo MIME para arquivos .m3u8
            video/mp2t ts;                        # Tipo MIME para arquivos .ts
        }

        alias /tmp/hls;  # Diretório onde os arquivos HLS estão armazenados
        add_header Cache-Control no-cache;  # Adiciona controle de cache

        }
    }
}


    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;
